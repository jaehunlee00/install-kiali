# Source: kiali-server/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kiali
  namespace: istio-system
  labels:
    helm.sh/chart: kiali-server-{KIALI_HELM_VERSION}
    app: kiali
    app.kubernetes.io/name: kiali
    app.kubernetes.io/instance: kiali
    version: "v{KIALI_HELM_VERSION}"
    app.kubernetes.io/version: "v{KIALI_HELM_VERSION}"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "kiali"
---
# Source: kiali-server/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kiali
  namespace: istio-system
  labels:
    helm.sh/chart: kiali-server-{KIALI_HELM_VERSION}
    app: kiali
    app.kubernetes.io/name: kiali
    app.kubernetes.io/instance: kiali
    version: "v{KIALI_HELM_VERSION}"
    app.kubernetes.io/version: "v{KIALI_HELM_VERSION}"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "kiali"
data:
  config.yaml: |
    auth:
      strategy: openid
      openid:
        client_id: "{CLIENT_ID}"
        disable_rbac: true
        issuer_uri: "https://{KEYCLOAK_ADDR}/auth/realms/tmax"
        scopes: ["openid", "email"]
        username_claim: "email"

    deployment:
      accessible_namespaces:
      - '**'
      additional_service_yaml: {}
      affinity:
        node: {}
        pod: {}
        pod_anti: {}
      hpa:
        api_version: autoscaling/v2beta2
        spec: {}
      image_name: quay.io/kiali/kiali
      image_pull_policy: Always
      image_pull_secrets: []
      image_version: v{KIALI_VERSION}
      ingress_enabled: false
      instance_name: kiali
      logger:
        log_format: text
        log_level: info
        sampler_rate: "1"
        time_field_format: 2006-01-02T15:04:05Z07:00
      namespace: istio-system
      node_selector: {}
      override_ingress_yaml:
        metadata: {}
      pod_annotations: {}
      pod_labels:
        sidecar.istio.io/inject: "false"
      priority_class_name: ""
      replicas: 1
      resources: {}
      secret_name: kiali
      service_annotations: {}
      service_type: ""
      tolerations: []
      version_label: v{KIALI_HELM_VERSION}
      view_only_mode: false
    external_services:
      istio:
        url_service_version: http://istio-pilot.istio-system:8080/version
      tracing:
        url:
        in_cluster_url: http://tracing/api/jaeger
      grafana:
        url:
        in_cluster_url: http://grafana.monitoring:3000
      prometheus:
        url: http://prometheus-k8s.monitoring:9090

    identity:
      cert_file: ""
      private_key_file: ""
    istio_namespace: istio-system
    login_token:
      signing_key: CHANGE-ME
    server:
      port: 20001
      web_root: /api/kiali
---
# Source: kiali-server/templates/role-viewer.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kiali-viewer
  labels:
    helm.sh/chart: kiali-server-{KIALI_HELM_VERSION}
    app: kiali
    app.kubernetes.io/name: kiali
    app.kubernetes.io/instance: kiali
    version: "v{KIALI_HELM_VERSION}"
    app.kubernetes.io/version: "v{KIALI_HELM_VERSION}"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "kiali"
rules:
  - apiGroups: [""]
    resources:
      - configmaps
      - endpoints
      - pods/log
    verbs:
      - get
      - list
      - watch
  - apiGroups: [""]
    resources:
      - namespaces
      - pods
      - replicationcontrollers
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups: [""]
    resources:
      - pods/portforward
    verbs:
      - create
      - post
  - apiGroups: ["extensions", "apps"]
    resources:
      - daemonsets
      - deployments
      - replicasets
      - statefulsets
    verbs:
      - get
      - list
      - watch
  - apiGroups: ["batch"]
    resources:
      - cronjobs
      - jobs
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - networking.istio.io
      - security.istio.io
    resources: ["*"]
    verbs:
      - get
      - list
      - watch
  - apiGroups: ["apps.openshift.io"]
    resources:
      - deploymentconfigs
    verbs:
      - get
      - list
      - watch
  - apiGroups: ["project.openshift.io"]
    resources:
      - projects
    verbs:
      - get
  - apiGroups: ["route.openshift.io"]
    resources:
      - routes
    verbs:
      - get
  - apiGroups: ["iter8.tools"]
    resources:
      - experiments
    verbs:
      - get
      - list
      - watch
  - apiGroups: ["authentication.k8s.io"]
    resources:
      - tokenreviews
    verbs:
      - create
---
# Source: kiali-server/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kiali
  labels:
    helm.sh/chart: kiali-server-{KIALI_HELM_VERSION}
    app: kiali
    app.kubernetes.io/name: kiali
    app.kubernetes.io/instance: kiali
    version: "v{KIALI_HELM_VERSION}"
    app.kubernetes.io/version: "v{KIALI_HELM_VERSION}"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "kiali"
rules:
  - apiGroups: [""]
    resources:
      - configmaps
      - endpoints
      - pods/log
    verbs:
      - get
      - list
      - watch
  - apiGroups: [""]
    resources:
      - namespaces
      - pods
      - replicationcontrollers
      - services
    verbs:
      - get
      - list
      - watch
      - patch
  - apiGroups: [""]
    resources:
      - pods/portforward
    verbs:
      - create
      - post
  - apiGroups: ["extensions", "apps"]
    resources:
      - daemonsets
      - deployments
      - replicasets
      - statefulsets
    verbs:
      - get
      - list
      - watch
      - patch
  - apiGroups: ["batch"]
    resources:
      - cronjobs
      - jobs
    verbs:
      - get
      - list
      - watch
      - patch
  - apiGroups:
      - networking.istio.io
      - security.istio.io
    resources: ["*"]
    verbs:
      - get
      - list
      - watch
      - create
      - delete
      - patch
  - apiGroups: ["apps.openshift.io"]
    resources:
      - deploymentconfigs
    verbs:
      - get
      - list
      - watch
      - patch
  - apiGroups: ["project.openshift.io"]
    resources:
      - projects
    verbs:
      - get
  - apiGroups: ["route.openshift.io"]
    resources:
      - routes
    verbs:
      - get
  - apiGroups: ["iter8.tools"]
    resources:
      - experiments
    verbs:
      - get
      - list
      - watch
      - create
      - delete
      - patch
  - apiGroups: ["authentication.k8s.io"]
    resources:
      - tokenreviews
    verbs:
      - create
---
# Source: kiali-server/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kiali
  labels:
    helm.sh/chart: kiali-server-{KIALI_HELM_VERSION}
    app: kiali
    app.kubernetes.io/name: kiali
    app.kubernetes.io/instance: kiali
    version: "v{KIALI_HELM_VERSION}"
    app.kubernetes.io/version: "v{KIALI_HELM_VERSION}"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "kiali"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kiali
subjects:
  - kind: ServiceAccount
    name: kiali
    namespace: istio-system
---
# Source: kiali-server/templates/role-controlplane.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kiali-controlplane
  namespace: istio-system
  labels:
    helm.sh/chart: kiali-server-{KIALI_HELM_VERSION}
    app: kiali
    app.kubernetes.io/name: kiali
    app.kubernetes.io/instance: kiali
    version: "v{KIALI_HELM_VERSION}"
    app.kubernetes.io/version: "v{KIALI_HELM_VERSION}"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "kiali"
rules:
  - apiGroups: [""]
    resources:
      - secrets
    verbs:
      - list
---
# Source: kiali-server/templates/rolebinding-controlplane.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kiali-controlplane
  namespace: istio-system
  labels:
    helm.sh/chart: kiali-server-{KIALI_HELM_VERSION}
    app: kiali
    app.kubernetes.io/name: kiali
    app.kubernetes.io/instance: kiali
    version: "v{KIALI_HELM_VERSION}"
    app.kubernetes.io/version: "v{KIALI_HELM_VERSION}"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "kiali"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kiali-controlplane
subjects:
  - kind: ServiceAccount
    name: kiali
    namespace: istio-system
---
apiVersion: v1
kind: Secret
metadata:
  name: kiali
  namespace: istio-system
  labels:
    app: kiali
type: Opaque
data:
  oidc-secret: "{CLIENT_SECRET}"

---
# Source: kiali-server/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kiali
  namespace: istio-system
  labels:
    helm.sh/chart: kiali-server-{KIALI_HELM_VERSION}
    app: kiali
    app.kubernetes.io/name: kiali
    app.kubernetes.io/instance: kiali
    version: "v{KIALI_HELM_VERSION}"
    app.kubernetes.io/version: "v{KIALI_HELM_VERSION}"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "kiali"
spec:
  ports:
    - name: http-kiali
      protocol: TCP
      port: 20001
    - name: http-metrics
      protocol: TCP
      port: 9090
  selector:
    app.kubernetes.io/name: kiali
    app.kubernetes.io/instance: kiali
---
# Source: kiali-server/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kiali
  namespace: istio-system
  labels:
    helm.sh/chart: kiali-server-{KIALI_HELM_VERSION}
    app: kiali
    app.kubernetes.io/name: kiali
    app.kubernetes.io/instance: kiali
    version: "v{KIALI_HELM_VERSION}"
    app.kubernetes.io/version: "v{KIALI_HELM_VERSION}"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "kiali"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kiali
      app.kubernetes.io/instance: kiali
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      name: kiali
      labels:
        helm.sh/chart: kiali-server-{KIALI_HELM_VERSION}
        app: kiali
        app.kubernetes.io/name: kiali
        app.kubernetes.io/instance: kiali
        version: "v{KIALI_HELM_VERSION}"
        app.kubernetes.io/version: "v{KIALI_HELM_VERSION}"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: "kiali"
        sidecar.istio.io/inject: "false"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        kiali.io/dashboards: go,kiali
    spec:
      serviceAccountName: kiali
      containers:
        - image: "quay.io/kiali/kiali:v{KIALI_VERSION}"
          imagePullPolicy: Always
          name: kiali
          command:
            - "/opt/kiali/kiali"
            - "-config"
            - "/kiali-configuration/config.yaml"
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
          ports:
            - name: http-kiali
              containerPort: 20001
            - name: http-metrics
              containerPort: 9090

          readinessProbe:
            httpGet:
              path: api/kiali/healthz
              port: http-kiali
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 30
          livenessProbe:
            httpGet:
              path: api/kiali/healthz
              port: http-kiali
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 30
          resources:
            requests:
              cpu: 50m
              memory: 128Mi
            limits:
              cpu: 100m
              memory: 256Mi
          env:
            - name: ACTIVE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: LOG_LEVEL
              value: "info"
            - name: LOG_FORMAT
              value: "text"
            - name: LOG_TIME_FIELD_FORMAT
              value: "2006-01-02T15:04:05Z07:00"
            - name: LOG_SAMPLER_RATE
              value: "1"
          volumeMounts:
            - name: kiali-configuration
              mountPath: "/kiali-configuration"
            - name: kiali-cert
              mountPath: "/kiali-cert"
            - name: kiali-secret
              mountPath: "/kiali-secret"
            - name: kiali-cabundle
              mountPath: "/kiali-cabundle"
      volumes:
        - name: kiali-configuration
          configMap:
            name: kiali
        - name: kiali-cert
          secret:
            secretName: istio.kiali-service-account
            optional: true
        - name: kiali-secret
          secret:
            secretName: kiali
            optional: true
        - name: kiali-cabundle
          configMap:
            name: kiali-cabundle
            optional: true
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  labels:
    app.kubernetes.io/instance: traefik
    app.kubernetes.io/managed-bu: tmax-cloud
    app.kubernetes.io/name: api-gateway
  name: kiali
  namespace: istio-system
spec:
  secretName: kiali-secret
  commonName: api-gateway
  subject:
    organizations:
      - "tmax-cloud"
  isCA: false
  usages:
    - digital signature
    - key encipherment
    - server auth
    - client auth
  dnsNames:
    - "kaili.{DOMAIN}"
  issuerRef:
    kind: ClusterIssuer
    group: cert-manager.io
    name: tmaxcloud-issuer
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kiali-ingress
  namespace: istio-system
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
  labels:
    ingress.tmaxcloud.org/name: kiali
spec:
  ingressClassName: tmax-cloud

  tls:
  - hosts:
      - kiali.{DOMAIN}
    secretName: kiali-https-secret

  rules:
  - host: kiali.{DOMAIN}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: kiali
            port:
              number: 20001
      - path: /api/kiali
        pathType: Prefix
        backend:
          service:
            name: kiali
            port:
              number: 20001
